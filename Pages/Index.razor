@page "/"

@using Newtonsoft.Json
@using System.Collections
@using Microsoft.EntityFrameworkCore

@using KanbanWithCrudCustomAdaptor.Models
@using Syncfusion.Blazor.Navigations
@inject OrderService _craftService;

<SfKanban ID="Kanban" TValue="OrderDetail" KeyField="ShipCity">
    <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
    <KanbanColumns>
        <KanbanColumn HeaderText="Moscow" KeyField=@(new List<string>{"Moscow"}) AllowAdding=true></KanbanColumn>
        <KanbanColumn HeaderText="London" KeyField=@(new List<string>{"London"})></KanbanColumn>
        <KanbanColumn HeaderText="Singapore" KeyField=@(new List<string>{"Singapore"})></KanbanColumn>
    </KanbanColumns>
    <KanbanCardSettings HeaderField="EmployeeId" ContentField="ShipName">
    </KanbanCardSettings>
</SfKanban>

@code {
    public class CustomAdaptor : DataAdaptor
    {
        OrderContext db = new OrderContext();
        public CustomAdaptor()
        {
        }
        public async override Task<object> ReadAsync(DataManagerRequest dm, string key = null)
        {
            OrderService _craftService = new OrderService();
            IEnumerable DataSource = await _craftService.GetOrdersAsync();
            int count = DataSource.Cast<OrderDetail>().Count();
            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
        }

        

        public override Task<object> InsertAsync(DataManager dm, object value, string key)
        {
            // (value as OrderDetail).EmployeeId = db.OrderDetails.Select(x => x.EmployeeId).Max() + 1;
            db.OrderDetails.Add((OrderDetail)value);
            db.SaveChangesAsync();
            return Task.Run(() =>
            {
                return value;
            });
        }

        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            var data = db.OrderDetails.Where(or => or.EmployeeId == (value as OrderDetail).EmployeeId).FirstOrDefault();
            if (data != null)
            {
                data.EmployeeId = (value as OrderDetail).EmployeeId;
                data.ShipCity = (value as OrderDetail).ShipCity;
                data.ShipName = (value as OrderDetail).ShipName;
            }
            db.SaveChangesAsync();
            return Task.Run(() =>
            {
                return value;
            });
        }

        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            OrderDetail ord = db.OrderDetails.Find(Convert.ToInt32(value));
            db.OrderDetails.Remove(ord);
            db.SaveChangesAsync();
            return Task.Run(() =>
            {
                return value;
            });
        }

        // Performs BatchUpdate operation
        public override object BatchUpdate(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            if (Changed != null)
            {
                foreach (var rec in (IEnumerable<OrderDetail>)Changed)
                {
                    OrderDetail val = db.OrderDetails.Where(or => or.EmployeeId == rec.EmployeeId).FirstOrDefault();
                    val.EmployeeId = (rec as OrderDetail).EmployeeId;
                    val.ShipCity = (rec as OrderDetail).ShipCity;
                    val.ShipName = (rec as OrderDetail).ShipName;
                }
            }
            if (Added != null)
            {
                foreach (var rec in (IEnumerable<OrderDetail>)Added)
                {
                    db.OrderDetails.Add(rec);
                }
            }
            if (Deleted != null)
            {
                foreach (var rec in (IEnumerable<OrderDetail>)Deleted)
                {
                    db.OrderDetails.Remove(db.OrderDetails.Where(or => or.EmployeeId == rec.EmployeeId).FirstOrDefault());
                }
            }
            db.SaveChanges();
            return db.OrderDetails;
        }
    }
}